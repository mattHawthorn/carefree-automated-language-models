---
sequence:
    # weird unicode whitespace
    - op: replace
      arguments:
          pattern: '\xa0'
          repl: ' '
    - op: lower
    # repeated chars; reduce to 2 max
    - op: replace
      arguments:
          pattern: '([a-zA-Z])\1{2,}'
          repl: '\1\1'
    - op: replace
      arguments:
          pattern: '[_]'
          repl: ' '
    # happy emoticons
    - op: replace
      args:
          pattern: '(:|;)-?\)'
          repl: ' _SMILEY_ '
    # sad emoticons
    - op: replace
      args:
          pattern: ':-?\('
          repl: ' _FROWNY_ '
    # potentially useful puntuation; split it off
    - op: replace
      args:
          pattern: '([!?$\*\+])\1+'
          repl: ' _\1\1_ '
    - op: replace
      args: 
          pattern: '\s+'
          repl: ' '
    # floating point
    - op: replace
      arguments:
          pattern: '[0-9]+\.[0-9]+'
          repl: ' _NUM_ '
    # ints
    - op: replace
      arguments:
          pattern: '[0-9]+'
          repl: ' _NUM_ '
    # all remaining unwanted chars
    - op: replace
      arguments:
          pattern: '[^a-zA-Z!?$\*\+_]'
          repl: ' '
    # tokenize on whitespace
    - op: tokenize
      args: 
          name: RegexpTokenizer
          kwargs: 
                pattern: '\s+'
                gaps: True
                discard_empty: True
    # and stem what's left
    - op: stem
      args:
          name: SnowballStemmer
          kwargs:
              language: english
              ignore_stopwords: True          


ngrams:
    n: 1
    max stopwords: 0
stopwords:
    english.stop
#stopwords: [and,the]          
...
